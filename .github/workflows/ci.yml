name: MLOps CI/CD Pipeline

# Trigger workflow on push to main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define environment variables
env:
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Test Suite - Runs pytest tests
  test_suite:
    name: Run Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create __init__.py files
      run: |
        touch src/__init__.py
        touch tests/__init__.py
        
    - name: Run pytest tests
      run: |
        pytest tests/ -v --tb=short
        

  # Job 2: Train and Quantize - Trains model and runs quantization
  train_and_quantize:
    name: Train Model and Quantize
    runs-on: ubuntu-latest
    needs: test_suite  # Only run if tests pass
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create __init__.py files
      run: |
        touch src/__init__.py
        
    - name: Train model
      run: |
        cd src
        python train.py
        
    - name: Validate model training
      run: |
        cd src
        ls -la *.joblib
        python -c "import joblib; model = joblib.load('model.joblib'); print(f'Model type: {type(model).__name__}'); print(f'Model coef shape: {model.coef_.shape}')"
        
    - name: Run quantization
      run: |
        cd src
        python quantize.py
        
    - name: Validate quantization
      run: |
        cd src
        ls -la *.joblib
        python -c "import joblib; params = joblib.load('quant_params.joblib'); print(f'Quantized parameters keys: {list(params.keys())}')"
        
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: |
          model.joblib
          scaler.joblibs
          unquant_params.joblib
          quant_params.joblib
        retention-days: 30

  # Job 3: Build, Test, and Push Container
  build_and_test_container:
    name: Build, Test, and Push Docker Container
    runs-on: ubuntu-latest
    needs: train_and_quantize  # Only run after training and quantization
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: .
        
    - name: Verify model artifacts
      run: |
        ls -la *.joblib
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t ml-model:latest .
        
    - name: Verify Docker image
      run: |
        docker images | grep ml-model
        
    - name: Test Docker container
      run: |
        echo "Running Docker container test..."
        docker run --rm ml-model:latest
        
    - name: Test container with specific command
      run: |
        echo "Testing container with prediction script..."
        docker run --rm ml-model:latest python src/predict.py
        
    - name: Container health check
      run: |
        echo "Starting container for health check..."
        container_id=$(docker run -d ml-model:latest tail -f /dev/null)
        sleep 5
        docker exec $container_id python -c "import joblib; print('Model loads successfully:', type(joblib.load('model.joblib')).__name__)"
        docker stop $container_id
        
    - name: Login to Docker Hub platform
      if: success() && github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push to Docker Hub
      if: success() && github.ref == 'refs/heads/main'
      run: |
        docker tag ml-model:latest ${{ secrets.DOCKER_USERNAME }}/ml-model:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/ml-model:latest
        echo "Docker image has been pushed successfully."
